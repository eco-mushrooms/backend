services:
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: backend-dev
    entrypoint: [ "/app/entrypoint.dev.sh" ]
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    environment:
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - REDIS_URL=${REDIS_URL_DEV}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL_DEV}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND_DEV}
      - DATABASE_USER=${DATABASE_USER_DEV}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD_DEV}
      - DATABASE_HOST=${DATABASE_HOST_DEV}
      - DEBUG=${DEBUG_DEV}
      - SECRET_KEY=${SECRET_KEY}
      - DEVELOPMENT_MODE=${DEVELOPMENT_MODE_DEV}
    depends_on:
      - db-dev
      - redis-dev
    ports:
      - "8000:8000"

  db-dev:
    image: postgres:16.0
    container_name: db-dev
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${DATABASE_USER_DEV}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD_DEV}
      - POSTGRES_DB=${DATABASE_NAME_DEV}

  adminer-dev:
    container_name: adminer-dev
    image: adminer
    restart: always
    ports:
      - 8080:8080

  redis-dev:
    image: redis:alpine
    container_name: redis-dev
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s

  celery-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: celery-dev
    entrypoint: [ "./worker-entrypoint.sh" ]
    volumes:
      - .:/app
    environment:
      - REDIS_URL=${REDIS_URL_DEV}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL_DEV}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND_DEV}
    depends_on:
      - db-dev
      - redis-dev

volumes:
  static_volume:
  media_volume:
  postgres_data:
